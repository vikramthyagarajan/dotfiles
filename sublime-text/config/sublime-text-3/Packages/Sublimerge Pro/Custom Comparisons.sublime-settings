/*
NOTE: PLEASE DO NOT EDIT THIS FILE TO PREVENT YOUR CUSTOM SETTINGS FROM BEING OVERRIDDEN EACH TIME  SUBLIMERGE
IS UPGRADED. READ BELOW HOW TO IMPLEMENT YOUR OWN COMMANDS.


This file contains default custom comparisons.
 
If you want to create your own, please do it in `Custom Comparisons - User` file. Please initialize that file
with the following content in order not to override the default ones:

"custom_comparisons_user": [
   //your definitions here
]

Remember that you can call shell scripts. If something can't be done here, or requires more advanced logic,
you can do it in that script and return a parseable output.

To make comparison available only for Git, SVN or Mercurial, set 'requires' to one of the following:
'git', 'svn', 'hg'. Set to null if doesn't need any of VCS.

To make comparison available only for OSX, Windows or Linux, set 'platform' to one of the following:
'osx', 'windows', 'linux'. Can be also an array containing multiple systems.

NOTE: currently there are no debugging mechanisms implemented so while creating new comparison, please open
Sublime's console for error logging.

Predefined variables:

{config:<config_key>} - returns a configuration value for given key
{sublimerge:repo_root} - root directory where '.svn', '.git' or '.hg' is located
{sublimerge:current_file} - full path of active file, i.e. '/Users/workspace/my_project/something.js'
{sublimerge:current_file_dir} - full path of  active file owning directory, i.e. '/Users/workspace/my_project'
{sublimerge:current_file_name} - name of active file, i.e. 'something.js'
{sublimerge:temp_dir} - path to system's temporary files directory

Variables modifiers:

{variable|basename} - if `variable` contains filesystem path, will return only its base name
{variable|dirname} - if `variable` contains filesystem path, will return only its directory path
{variable|ext} - if `variable` contains filesystem path/file name, will return only file's extension

i.e.

{sublimerge:current_file|basename}
{sublimerge:current_file|dirname}

Modifiers can be chained:

{sublimerge:current_file|dirname|dirname|...}




Each comparison is defined as follows:

{
    "name": "Comparison Name",
    "requires": null, //can be 'git', 'svn', 'hg' or null. When skipped defaults to null.
    "platform": null, //can be 'osx', 'windows', 'linux' or null or array. When skipped defaults to null.
    "steps": [
        {
            //step 1
        },
        {
            //step 2
        },
        ...
        {
            //step N
        }
    ]
}

Each step MUST consist of ONLY ONE directive. One of these:

- quick_panel
- history_panel
- define
- prompt
- capture
- compare
- log
- sublime_command

NOTE: each string argument accepts {variable} placeholders for variables.


Syntax and description:

log

    Prints debugging information into Sublime's console.

    log {
        <string> text
    }

history_panel

    Displays Quick Panel with list of commits for given file. When user selects a commit,
    variable defined by `name` is populated with commit number. If file is not versioned
    or does not exist, displays an error message and stop comparison execution. Works
    automatically for Git, SVN and Mercurial.

    history_panel {
        <string> name,
        <string> file
    }

quick_panel

    Displays Quick Panel (list menu) with data prepared by `source` directive.
    String argument `name` is used to populate a variable which will hold selected value.

    quick_panel {
        <string> name,
        <source> source
    }

source

    Parses output returned by command defined in `execute` directive. Returns parsed items
    to the parent `quick_panel`. If parsed output is empty, stops flow execution and
    optionally displays message defined by `empty_message` string argument. If `alpha` argument
    is true, then all items are sorted alphabetically. If `reverse` argument is true, items are
    sorted in reversed order. Can be used together with `alpha`. When `none` or `only` is set,
    then items are filtered against it. Arguments `none` and `only` must not be set together.
    Use only one of them.

    source {
        <execute> execute,
        <item> item
        [, <boolean> alpha=false]
        [, <boolean> reverse=false]
        [, <only> only]
        [, <none> none]
        [, <string> empty_message]
    }

only, none

    Controls how to filter data returned by `source` directive. You can pass one of the
    following arguments: `source` - another `source` directive to fetch values, or `values`
    which is array of predefined string values.

    `only` - return only items which value is listed,
    `none` - return only items which value is not listed

    only, none {
        [<source> source]
        [,<array> values]
    }

execute

    Executes given command in given directory

    execute {
        <string> command,
        <string> directory
    }

item

    Used by `source` directive to parse its `execute` output. Parsing is called for every
    output line. The `regexp` string argument defines regular expression to be used to parse line.
    The `caption` argument, array of strings, is used to create each item which will be displayed
    in `quick_panel`. The `value` string argument sets item's value.

    Both `caption` and `value` accepts '@<number>' placeholders for each `regexp` capturing group,
    i.e. @0, @1 and so on.

    To make all items unique by their values, set `unique` argument to true.

    item {
        <string> regexp,
        <array> caption,
        <string> value
        [, <boolean> unique=false]
    }

define

    Allows to define variables to be used in next steps. Variable values may contain {variable}
    placeholders to be replaced with previously declared variables' values.

    define {
        <string> var_name_1: <string> var_value_1,
        ...
        <string> var_name_N: <string> var_value_N
    }

compare

    Runs files comparison. Optionally can call a shell command given in `execute` statement just
    before comparison is run.

    compare {
        [<execute> execute, ]
        <left> left,
        <right> right
    }

left, right

    Defines left and right files for `compare` directive. The boolean `temporary` argument defines
    whether a file is temporary. Temporary files are read-only and are automatically removed
    after comparison is done. When `title` is provided then it is used for files' tab title.
    Defaults to file name.

    left, right {
        <string> file,
        <boolean> temporary
        [, <string>] title
    }

capture

    Captures output from `execute` directive. If you want a step to run `execute` directive you must
    put it in `capture`.

    `name` - if set, a variable containing captured output will be populated
    `regexp` - if set, used to find and and parse matching output lines
    `value` - if set, allows to format output line. Accepts '@<number>' placeholders for `regexp`
    `greedy` - by default `capture` is not greedy and will stop on first (matching) line
    `empty_message` - if set, empty capture will display a message and stop flow

    capture {
        <execute> execute
        [, <string> name]
        [, <string> regexp]
        [, <string> value]
        [, <boolean> greedy=false]
        [, <string> empty_message]
    }

prompt

    Displays a text box in the bottom of editor and populates a variable, defined by `name` with
    text entered by user. The `caption` string argument is used to display field's caption.
    The `default` string argument defines initial value displayed in field.

    prompt {
        <string> name,
        <string> caption
        [, <string> default]
    }

sublime_command

    Runs Sublime Text's built-in (or plugins-provided) command.

    sublime_command {
        <string> command
        [, <object> args]
    }

 */

{
    "custom_comparisons": [
        /************************************* GIT *************************************/

        /*
         * Custom Git comparison. Displays quick panel with modified files and allows to compare working copy to HEAD to see uncommited changes.
         */
        {
            "name": "Show Uncommited Changes...", //comparison name
            "requires": "git", //What does it require. Currently 'git', 'svn' 'hg' or null (if doesn't require any of VCS)
            "steps": [ //comparison is divided into steps. You can define more steps when needed.
                {
                    "quick_panel": { //Displays a Quick Panel with given attributes
                        "name": "modified_file", //Quick Panel name. Used to populate a variable 'modified_file' with seleted item value
                        "source": { //Data source
                            "execute": { //Execute a shell command
                                "command": "{git} status --porcelain --untracked-files=no",
                                "directory": "{sublimerge:repo_root}" //Set a command working directory
                            },
                            "item": { //Single item extractor
                                "regexp": "^\\s+M\\s+\"?(.*?)\"?$", //Regular expression to parse each output line
                                "caption": ["@1"], //Caption is an array. Each item is another line. @n - placeholder for regular expression match
                                "value": "@1" //Value must be a single string
                            },
                            "empty_message": "There are no uncommited changes" //Message to be displayed when data source is empty (no items created)
                        }
                    }
                },
                { //define variables
                    "define": {
                        "right_file": "{sublimerge:repo_root}/{modified_file}",
                        "left_file": "{sublimerge:temp_dir}/{modified_file|basename}@HEAD"
                    }
                },
                {
                    "compare": { //Executes file comparison
                        "execute": { //Execute a shell command. Please note about 'modified_file' variable which we defined in previous step
                            "command": "{git} show HEAD:\"./{modified_file}\" > \"{left_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "left": { //Left file
                            "file": "{left_file}", //Full file path
                            "temporary": true //This file is generated by previous shell command, so remove it automatically after use
                        },
                        "right": {
                            "file": "{right_file}",
                            "temporary": false //This file is our working copy, so is not temporary
                        }
                    }
                }
            ]
        },

        /*
         * Custom Git comparison. Allows to compare your working file with the same file in another branch
         */
        {
            "name": "Compare to Other Branch...",
            "requires": "git",
            "steps": [
                {
                    "quick_panel": {
                        "name": "get_branch",
                        "source": {
                            "execute": {
                                "command": "{git} branch",
                                "directory": "{sublimerge:current_file_dir}"
                            },
                            "item": {
                                "regexp": "^(?:(\\*\\s+)|(?:\\s+))([^\\(]+)$",
                                "caption": ["@1@2", "{sublimerge:current_file_name} in @2"],
                                "value": "@2"
                            },
                            "empty_message": "There are no branches"
                        }
                    }
                },
                {
                    "define": {
                        "output_file": "{sublimerge:temp_dir}/{sublimerge:current_file|basename}@branch"
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{git} show \"{get_branch}\":\"./{sublimerge:current_file_name}\" > \"{output_file}\"",
                            "directory": "{sublimerge:current_file_dir}"
                        },

                        "left": {
                            "title": "{sublimerge:current_file|basename}@{get_branch}",
                            "file": "{output_file}",
                            "temporary": true
                        },

                        "right": {
                            "file": "{sublimerge:current_file}",
                            "temporary": false
                        }
                    }
                }
            ]
        },

        /*
         * Custom Git comparison. Allows to show unpushed changes
         */
        {
            "name": "Show Unpushed Changes...",
            "requires": "git",
            "steps": [
                {
                    "capture": { //get current branch name
                        "name": "branch", //populate as `branch` variable
                        "execute": {
                            "command": "{git} branch --no-color",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "regexp": "^\\*\\s+(.+)$",
                        "value": "@1"
                    }
                },
                {
                    "capture": {
                        "name": "ref_head",
                        "execute": {
                            "command": "{git} symbolic-ref HEAD",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "regexp": "^([^\\s]+)$",
                        "value": "@1"
                    }
                },
                {
                    "capture": {
                        "name": "remote",
                        "execute": {
                            "command": "{git} branch -vv --no-color",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "regexp": "^\\*.*?\\[([^/]+/[^:\\]]+).*?\\].*$",
                        "value": "@1",
                        "empty_message": "{branch} is not a remote-tracking branch" //if no match is found, display a message and stop
                    }
                },
                {
                    "quick_panel": {
                        "name": "file",
                        "source": {
                            "execute": {
                                "command": "{git} log {remote}..HEAD --name-status --no-decorate --pretty=\"format:\"",
                                "directory": "{sublimerge:repo_root}"
                            },
                            "item": {
                                "regexp": "^M\\s+(.+)$",
                                "caption": ["@1", "{remote}"],
                                "value": "@1",
                                "unique": true //every item's value must be unique. duplicates will be filtered out
                            },
                            "empty_message": "There are no unpushed changes"
                        }
                    }
                },
                {
                    "define": {
                        "left_file": "{sublimerge:temp_dir}/{file|basename}@remote{file|ext}", //append extension so that syntax highlight will be applied
                        "right_file": "{sublimerge:temp_dir}/{file|basename}@HEAD{file|ext}" //append extension so that syntax highlight will be applied
                    }
                },
                {
                    "capture": { //capture also allows to run `execute` block as a step
                        "execute": {
                            "command": "{git} show HEAD:\"./{file}\" > \"{right_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        }
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{git} show {remote}:\"./{file}\" > \"{left_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "left": {
                            "file": "{left_file}",
                            "title": "{file|basename}@{remote}",
                            "temporary": true
                        },
                        "right": {
                            "file": "{right_file}",
                            "title": "{file|basename}@{ref_head}",
                            "temporary": true
                        }
                    }
                }
            ]
        },

        /*
         * Custom Git comparison. Allows to show changes between current HEAD and selected remote
         */
        {
            "name": "Show Changes Between Current and Remote...",
            "requires": "git",
            "steps": [
                {
                    "capture": {
                        "name": "branch",
                        "execute": {
                            "command": "{git} branch --no-color",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "regexp": "^\\*\\s+(.+)$",
                        "value": "@1"
                    }
                },
                {
                    "capture": {
                        "name": "ref_head",
                        "execute": {
                            "command": "{git} symbolic-ref HEAD",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "regexp": "^([^\\s]+)$",
                        "value": "@1"
                    }
                },
                {
                    "quick_panel": {
                        "name": "remote",
                        "source": {
                            "execute": {
                                "command": "{git} branch -r --no-color",
                                "directory": "{sublimerge:repo_root}"
                            },
                            "item": {
                                "regexp": "^\\s+([^\\s]+)(.*)$",
                                "caption": ["@1@2", "Compare {ref_head} to @1"],
                                "value": "@1"
                            }
                        }
                    }
                },
                {
                    "quick_panel": {
                        "name": "file",
                        "source": {
                            "execute": {
                                "command": "{git} log {remote}..HEAD --name-status --no-decorate --pretty=\"format:\"",
                                "directory": "{sublimerge:repo_root}"
                            },
                            "item": {
                                "regexp": "^M\\s+(.+)$",
                                "caption": ["@1", "{remote}"],
                                "value": "@1",
                                "unique": true
                            },
                            "empty_message": "There are no changes between {ref_head} and {remote}"
                        }
                    }
                },
                {
                    "define": {
                        "right_file": "{sublimerge:temp_dir}/{file|basename}@remote{file|ext}",
                        "left_file": "{sublimerge:temp_dir}/{file|basename}@HEAD{file|ext}"
                    }
                },
                {
                    "capture": {
                        "execute": {
                            "command": "{git} show HEAD:\"./{file}\" > \"{right_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        }
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{git} show {remote}:\"./{file}\" > \"{left_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "left": {
                            "file": "{left_file}",
                            "title": "{file|basename}@{remote}",
                            "temporary": true
                        },
                        "right": {
                            "file": "{right_file}",
                            "title": "{file|basename}@{ref_head}",
                            "temporary": true
                        }
                    }
                }
            ]
        },

        /*
         * Custom Git comparison. Allows to run custom Git command and compare working file with command's output
         */
        // {
        //     "name": "Custom Git Command...",
        //     "requires": "git",
        //     "steps": [
        //         {
        //             "prompt": {
        //                 "name": "args",
        //                 "caption": "{git}"
        //             }
        //         },
        //         {
        //             "compare": {
        //                 "execute": {
        //                     "command": "{git} {args} > \"{sublimerge:current_file}@custom\"",
        //                     "directory": "{sublimerge:current_file_dir}"
        //                 },

        //                 "left": {
        //                     "file": "{sublimerge:current_file}",
        //                     "temporary": false
        //                 },

        //                 "right": {
        //                     "file": "{sublimerge:current_file}@custom",
        //                     "temporary": true
        //                 }
        //             }
        //         }
        //     ]
        // },

        /************************************* SVN *************************************/

        /**
         * Custom SVN comparison. Displays quick panel with modified files and allows to compare working copy to HEAD to see uncommited changes.
         */
        {
            "name": "Show Uncommited Changes...",
            "requires": "svn",
            "steps": [
                {
                    "quick_panel": {
                        "name": "modified_file",
                        "source": {
                            "execute": {
                                "command": "{svn} status",
                                "directory": "{sublimerge:repo_root}"
                            },
                            "item": {
                                "regexp": "^M\\s+\"?(.*?)\"?$",
                                "caption": ["@1"],
                                "value": "@1"
                            },
                            "empty_message": "There are no uncommited changes"
                        }
                    }
                },
                {
                    "define": {
                        "output_file": "{sublimerge:temp_dir}/{modified_file|basename}@HEAD"
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{svn} cat \"{modified_file}\"@HEAD > \"{output_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "left": {
                            "file": "{output_file}",
                            "temporary": true
                        },
                        "right": {
                            "file": "{sublimerge:repo_root}/{modified_file}",
                            "temporary": false
                        }
                    }
                }
            ]
        },

        /************************************* MERCURIAL *************************************/

        /**
         * Custom Mercurial comparison. Displays quick panel with modified files and allows to compare working copy to tip to see uncommited changes.
         */
        {
            "name": "Show Uncommited Changes...",
            "requires": "hg",
            "steps": [
                {
                    "quick_panel": {
                        "name": "modified_file",
                        "source": {
                            "execute": {
                                "command": "{hg} status",
                                "directory": "{sublimerge:repo_root}"
                            },
                            "item": {
                                "regexp": "^M\\s+\"?(.*?)\"?$",
                                "caption": ["@1"],
                                "value": "@1"
                            },
                            "empty_message": "There are no uncommited changes"
                        }
                    }
                },
                {
                    "define": {
                        "output_file": "{sublimerge:temp_dir}/{modified_file|basename}@tip"
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{hg} cat \"./{modified_file}\" -r tip > \"{output_file}\"",
                            "directory": "{sublimerge:repo_root}"
                        },
                        "left": {
                            "file": "{output_file}",
                            "temporary": true
                        },
                        "right": {
                            "file": "{sublimerge:repo_root}/{modified_file}",
                            "temporary": false
                        }
                    }
                }
            ]
        },

        /**
         * Custom Mercurial comparison. Allows to compare current file to its copy in selected branch.
         */
        {
            "name": "Compare to Named Branch...",
            "requires": "hg",
            "steps": [
                {
                    "quick_panel": {
                        "name": "get_branch",
                        "source": {
                            "execute": {
                                "command": "{hg} branches",
                                "directory": "{sublimerge:current_file_dir}"
                            },
                            "item": {
                                "regexp": "^([^\\s]+)\\s+(.*)$",
                                "caption": ["@1", "{sublimerge:current_file_name} in @2"],
                                "value": "@1"
                            },
                            "empty_message": "There are no named branches"
                        }
                    }
                },
                {
                    "define": {
                        "output_file": "{sublimerge:temp_dir}/{sublimerge:current_file|basename}@branch"
                    }
                },
                {
                    "compare": {
                        "execute": {
                            "command": "{hg} cat \"{sublimerge:current_file_name}\" -r \"{get_branch}\" > \"{output_file}\"",
                            "directory": "{sublimerge:current_file_dir}"
                        },

                        "left": {
                            "title": "{sublimerge:current_file|basename}@{get_branch}",
                            "file": "{output_file}",
                            "temporary": true
                        },

                        "right": {
                            "file": "{sublimerge:current_file}",
                            "temporary": false
                        }
                    }
                }
            ]
        }
    ]
}